[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-03-06 14:12:06.010355",
  "module": null,
  "name": "work order",
  "script": "frappe.ui.form.on(\"Work Order Item\", \"consumed_qty\", function (frm, cdt, cdn) {\nvar d = locals[cdt][cdn];\nfrm.doc.required_items.forEach(function(d){d.consumed_value = flt(d.consumed_qty * d.rate) });\nfrappe.model.set_value(\"consumed_value\",consumed_value);\n})\n\n\nfrappe.ui.form.on(\"Work Order Item\", \"consumed_qty\", function on_change_consumed_qty(doc, cdt, cdn){\n    if (doc.consumed_qty){ \n        \ndoc.consumed_value = flt(doc.consumed_qty * doc.rate) ;\ncur_frm.refresh();\n}\ncur_frm.custom_consumed_qty = on_change_consumed_qty;\n\n});\n\n\n\nfrappe.ui.form.on(\"Work Order Item\", \"consumed_qty\", function on_change_consumed_qty(doc, cdt, cdn){\n    if (doc.consumed_qty){ \n        var d = locals[cdt][cdn];\nfrm.doc.required_items.forEach(function(d){d.consumed_value = flt(d.consumed_qty * d.rate) });\nfrappe.model.set_value(\"consumed_value\",consumed_value);\ncur_frm.refresh();\n}\ncur_frm.custom_consumed_qty = on_change_consumed_qty;\n\n});\n\n\nfrappe.ui.form.on(\"Work Order Item\", \"consumed_qty\", function(frm, cdt, cdn){\n\nvar d = locals[cdt][cdn];\nfrm.doc.required_items.forEach(function(d){d.consumed_value = flt(d.consumed_qty * d.rate) });\nfrappe.model.set_value(\"consumed_value\",consumed_value);\n\n});\n\n// frappe.ui.form.on(\"Work Order\", \"onload\", function(frm, cdt, cdn) {\n//     var d = locals[cdt][cdn];\n// var expenses = cur_frm.doc.required_items;\n// console.log(\"expenses--------------\"+expenses.length);\n// var total_clm = 0;\n//     for (var i = 0; i < required_items.length; i++){\n// var amount = required_items[i].consumed_value;\n\n// total_clm = total_clm + consumed_value;\n\n// }\n// console.log(\"total_expense---------------\"+total_clm); \n\n// cur_frm.doc.total_consumed_value = total_clm;\n// cur_frm.refresh_field(\"total_consumed_value\");\n// cur_frm.refresh();\n\n\n// });\n// frappe.ui.form.on(\"Work Order\",\"before_save\",function(frm, cdt, cdn){\n//     var d = locals[cdt][cdn];\n//     frappe.model.set_value(cdt, cdn, \"actual_cost\", d.total_consumed_value + d.labour_cost);\n    \n//     });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 1,
  "modified": "2023-03-03 15:49:00.576694",
  "module": null,
  "name": "sc2",
  "script": "frappe.ui.form.on(\"BOM\", {\n    total_cost: function(frm,cdt,cdn) {\n        var d = locals[cdt][cdn];\n        frappe.model.set_value(cdt, cdn, 'total_cost_with_labour', (d.total_cost + d.labour_cost));\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-03-04 11:10:25.480455",
  "module": null,
  "name": "WORK ORDER IN SALES ORDER LIST",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Open WO'), function() {\n            frappe.set_route('List', 'Work Order', {'sales_order': frm.doc.name});\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-03-04 11:10:08.321845",
  "module": null,
  "name": "Manufacture Request in SO",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Open MR'), function() {\n            frappe.set_route('List', 'Material Request', {'sales_order': frm.doc.name, 'status': 'Manufacture'});\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-03-04 10:39:49.346355",
  "module": null,
  "name": "WOs in SO List View",
  "script": "frappe.listview_settings['Sales Order'] = {\n    onload: function(listview) {\n        listview.page.add_menu_item(__('Open Work Orders'), function() {\n            var selected_items = listview.get_checked_items();\n            if (selected_items.length > 0) {\n                var sales_order_names = selected_items.map(function(item) {\n                    return item.name;\n                });\n                frappe.set_route('List', 'Work Order', {'sales_order': ['in', sales_order_names]});\n            } else {\n                frappe.throw(__('Please select at least one Sales Order to view Work Orders'));\n            }\n        });\n    }\n};\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 0,
  "modified": "2023-03-04 11:33:59.455852",
  "module": null,
  "name": "WO button in Material Req",
  "script": "frappe.ui.form.on('Material Request', {\r\n    refresh: function(frm) {\r\n        // add a custom button to the form\r\n        frm.add_custom_button(__('Open Work Orders'), function() {\r\n            // get the linked work orders\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'Work Order',\r\n                    fields: ['name'],\r\n                    filters: {\r\n                        'material_request': frm.doc.name\r\n                    }\r\n                },\r\n                callback: function(response) {\r\n                    var work_orders = response.message;\r\n                    if (work_orders.length > 0) {\r\n                        // open each work order in a new tab\r\n                        work_orders.forEach(function(work_order) {\r\n                            frappe.set_route('form', 'Work Order', work_order.name);\r\n                        });\r\n                    } else {\r\n                        frappe.msgprint('No linked work orders found.');\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2023-03-04 13:31:19.467997",
  "module": null,
  "name": "PR button in PO",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Open PR'), function() {\n            frappe.set_route('List', 'Purchase Receipt', {'purchase_order': frm.doc.name});\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2023-03-04 13:37:03.247290",
  "module": null,
  "name": "Material Request button in PO",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        if (frm.doc.material_request) {\n            frm.add_custom_button(__('Material Request'), function() {\n                frappe.set_route('Form', 'Material Request', frm.doc.material_request);\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-03-19 11:27:40.359777",
  "module": null,
  "name": "Manufacture Stock Entries",
  "script": "frappe.ui.form.on('Work Order', {\n    refresh: function(frm) {\n        if(frm.doc.status === 'Completed') {\n            frm.add_custom_button(__('Manufacture Stock Entry'), function() {\n                frappe.set_route('List', 'Stock Entry', {'work_order': frm.doc.name});\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-03-18 16:57:13.970412",
  "module": null,
  "name": "Total Value in Work Order",
  "script": "frappe.ui.form.on('Work Order', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.__islocal) return;\r\n\r\n        frappe.call({\r\n            method: 'frappe.client.get_value',\r\n            args: {\r\n                doctype: 'Stock Entry',\r\n                filters: {\r\n                    work_order: frm.doc.name,\r\n                    purpose: 'Manufacture'\r\n                },\r\n                fieldname: ['total_outgoing_value']\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.total_outgoing_value) {\r\n                    frm.set_df_property('raw_material_consumed_cost', 'hidden', false);\r\n                    frm.set_value('raw_material_consumed_cost', r.message.total_outgoing_value);\r\n                } else {\r\n                    frm.set_df_property('raw_material_consumed_cost', 'hidden', true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-03-18 17:04:12.369388",
  "module": null,
  "name": "Additional Costs in Work ORder",
  "script": "frappe.ui.form.on('Work Order', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.__islocal) return;\r\n\r\n        frappe.call({\r\n            method: 'frappe.client.get_value',\r\n            args: {\r\n                doctype: 'Stock Entry',\r\n                filters: {\r\n                    work_order: frm.doc.name,\r\n                    purpose: 'Manufacture'\r\n                },\r\n                fieldname: ['total_additional_costs']\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.total_additional_costs) {\r\n                    frm.set_df_property('additional_costs', 'hidden', false);\r\n                    frm.set_value('additional_costs', r.message.total_additional_costs);\r\n                } else {\r\n                    frm.set_df_property('additional_costs', 'hidden', true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 0,
  "modified": "2023-03-18 17:32:15.440562",
  "module": null,
  "name": "Total Incurred Costs In Work Order",
  "script": "frappe.ui.form.on('Work Order', {\r\n    onload: function(frm) {\r\n        frm.add_custom_button(__('Refresh Total Cost'), function() {\r\n            calculate_total_cost(frm);\r\n        });\r\n\r\n        frm.toggle_display('total_incurred_cost', false);\r\n        frm.toggle_display(['additional_costs', 'raw_material_consumed_cost'], true);\r\n    },\r\n    refresh: function(frm) {\r\n        frm.toggle_display('total_incurred_cost', true);\r\n        frm.toggle_display(['additional_costs', 'raw_material_consumed_cost'], true);\r\n    }\r\n});\r\n\r\nfunction calculate_total_cost(frm) {\r\n    var total_cost = frm.doc.additional_costs + frm.doc.raw_material_consumed_cost;\r\n    frm.set_value('total_incurred_cost', total_cost);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-03-18 17:32:39.012808",
  "module": null,
  "name": "Total Incurred Costs _ Work Order",
  "script": "frappe.ui.form.on('Work Order', {\n    onload: function(frm) {\n        // add custom fields to the form\n        frm.add_custom_field('additional_costs', 'Currency', 'Additional Costs');\n        frm.add_custom_field('raw_material_consumed_cost', 'Currency', 'Raw Material Consumed Cost');\n\n        // hide the custom field for storing the total cost\n        frm.toggle_display('total_incurred_cost', false);\n    },\n    refresh: function(frm) {\n        // show the custom field for storing the total cost\n        frm.toggle_display('total_incurred_cost', true);\n    }\n});\n\nfrappe.ui.form.on('Work Order', {\n    additional_costs: function(frm) {\n        // recalculate the total cost whenever the additional_costs field changes\n        calculate_total_cost(frm);\n    },\n    raw_material_consumed_cost: function(frm) {\n        // recalculate the total cost whenever the raw_material_consumed_cost field changes\n        calculate_total_cost(frm);\n    }\n});\n\nfunction calculate_total_cost(frm) {\n    // get the values of the custom fields\n    var additional_costs = frm.doc.additional_costs || 0;\n    var raw_material_consumed_cost = frm.doc.raw_material_consumed_cost || 0;\n\n    // calculate the total cost\n    var total_cost = additional_costs + raw_material_consumed_cost;\n\n    // set the value of the custom field for storing the total cost\n    frm.set_value('total_incurred_cost', total_cost);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-03-18 17:40:15.364472",
  "module": null,
  "name": "Unit Cost _ Work Order",
  "script": "frappe.ui.form.on('Work Order', {\n    onload: function(frm) {\n        // add custom field to the form\n        frm.add_custom_field('total_cost_per_unit', 'Currency', 'Total Cost Per Unit');\n\n        // hide the custom field for storing the total cost per unit\n        frm.toggle_display('total_cost_per_unit', false);\n    },\n    refresh: function(frm) {\n        // show the custom field for storing the total cost per unit\n        frm.toggle_display('total_cost_per_unit', true);\n    },\n    produced_qty: function(frm) {\n        // recalculate the total cost per unit whenever the produced_qty field changes\n        calculate_total_cost_per_unit(frm);\n    },\n    total_incurred_cost: function(frm) {\n        // recalculate the total cost per unit whenever the total_incurred_cost field changes\n        calculate_total_cost_per_unit(frm);\n    }\n});\n\nfunction calculate_total_cost_per_unit(frm) {\n    // get the values of the fields\n    var produced_qty = frm.doc.produced_qty || 0;\n    var total_incurred_cost = frm.doc.total_incurred_cost || 0;\n\n    // calculate the total cost per unit\n    var total_cost_per_unit = produced_qty ? (total_incurred_cost / produced_qty) : 0;\n\n    // set the value of the custom field for storing the total cost per unit\n    frm.set_value('total_cost_per_unit', total_cost_per_unit);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-03-19 19:05:13.300077",
  "module": null,
  "name": "Cost incurred Total Sales Order",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        // fetch completed work orders related to the sales order\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Work Order',\n                fields: ['name', 'total_incurred_cost'],\n                filters: {\n                    docstatus: 1,\n                    status: 'Completed',\n                    sales_order: frm.doc.name\n                }\n            },\n            callback: function(response) {\n                if (response.message) {\n                    // calculate total cost\n                    const total_cost = response.message.reduce((acc, wo) => {\n                        return acc + wo.total_incurred_cost;\n                    }, 0);\n\n                    // set value of custom field\n                    frm.set_value('cost_incurred', total_cost);\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-03-19 19:12:44.105760",
  "module": null,
  "name": "Cost incurred Margin Sales order",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        // calculate margin\n        const margin = frm.doc.total - (frm.doc.cost_incurred || 0);\n        \n        // set value of custom field\n        frm.set_value('margin', margin);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-03-19 20:33:17.889437",
  "module": null,
  "name": "Profit percentage Sales order",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        // get custom field value\n        \n        if (frm.doc.cost_incurred > 0){\n        const margin = frm.doc.margin;\n\n        // calculate and set profit percentage\n        const profit_percentage = (margin / frm.doc.total) * 100;\n        frm.set_value('profit_percentage', profit_percentage);\n    }}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-04-04 15:16:50.408807",
  "module": null,
  "name": "Work Order Progress Status",
  "script": "frappe.ui.form.on('Work Order', {\r\n    product_group: function(frm) {\r\n        var progress_status_options = [];\r\n        if (frm.doc.product_group === 'AHU/Ventilation/Scrubbers/AirWasher/Fans') {\r\n            progress_status_options = ['Planning', 'Procurement', 'Fabrication', 'Assembly', 'Final Inspection', 'Run Test(QC)', 'Packing','RTD'];\r\n        } else if (frm.doc.product_group === 'Grilles/Diffusers/Aluminium Dampers') {\r\n            progress_status_options = ['Planning', 'Procurement', 'Cutting', 'Assembly', 'Inspection', 'Powder COating','Final Inspection','Packing','RTD'];\r\n        }\r\n        else if (frm.doc.product_group === 'GI VCDs/GI Collar Dampers/Fire and Smoke Dampers') {\r\n            progress_status_options = ['Planning', 'Procurement', 'Fabrication', 'Assembly', 'Final Inspection', 'Packing','RTD'];\r\n        }\r\n        else if (frm.doc.product_group === 'Others') {\r\n            progress_status_options = ['Planning', 'Procurement', 'Fabrication', 'Assembly', 'Inspection', 'Finishing','Final Inspection','Packing','RTD'];\r\n        }\r\n        else if (frm.doc.product_group === 'Dehumidifiers') {\r\n            progress_status_options = ['Planning', 'Procurement', 'Cutting', 'Assembly', 'Inspection', 'Powder COating','Final Inspection','Packing','RTD'];\r\n        }\r\n        else if (frm.doc.product_group === 'Ducting') {\r\n            progress_status_options = ['Planning', 'Procurement', 'Cutting', 'Assembly', 'Inspection', 'Powder COating','Final Inspection','Packing','RTD'];\r\n        }\r\n        \r\n        \r\n        \r\n        frm.set_df_property('progress_status', 'options', progress_status_options);\r\n    },\r\n    refresh: function(frm) {\r\n        // customize progress_status color in list view\r\n        if (frm.doc.__islocal) {\r\n            // only apply this customization for new Work Orders\r\n            var progress_status_field = frm.fields_dict.progress_status;\r\n            progress_status_field.$input.addClass('label-success');\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-03-25 12:17:21.268140",
  "module": null,
  "name": "Sales Order _ MANUFACTURE STATUS",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    refresh: function(frm) {\r\n        // Only show the manufacture_status field if the sales order is submitted\r\n        if (frm.doc.docstatus === 1) {\r\n            frm.toggle_display('manufacture_status', true);\r\n        } else {\r\n            frm.toggle_display('manufacture_status', false);\r\n        }\r\n    },\r\n\r\n    validate: function(frm) {\r\n        // Check if all linked work orders have a progress_status of 'RTD'\r\n        var all_rtd = true;\r\n        $.each(frm.doc.work_order, function(i, work_order) {\r\n            if (work_order.progress_status !== 'RTD') {\r\n                all_rtd = false;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        // Set the manufacture_status field based on the work order status\r\n        if (frm.doc.work_order.length === 0) {\r\n            frm.set_value('manufacture_status', 'No Work Orders');\r\n        } else if (all_rtd) {\r\n            frm.set_value('manufacture_status', 'All items RTD');\r\n        } else {\r\n            frm.set_value('manufacture_status', 'Production in Progress');\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2023-04-04 15:18:09.017834",
  "module": null,
  "name": "Extract STOCK ENTRY ITEMS TO BOM",
  "script": "frappe.ui.form.on('Stock Entry', {\r\n  refresh: function(frm) {\r\n    if (frm.doc.purpose === 'Manufacture') {\r\n      frm.add_custom_button(__('Extract these items to BOM'), function() {\r\n        // get stock entry detail items\r\n        var items = frm.doc.items;\r\n        var bom_items = [];\r\n        // create BOM items from stock entry items\r\n        for (var i=0; i<items.length; i++) {\r\n          var item = items[i];\r\n          var bom_item = {\r\n            'item_code': item.item_code,\r\n            'qty': item.qty,\r\n            'uom': item.uom,\r\n            'stock_uom': item.stock_uom,\r\n            'conversion_factor': item.conversion_factor\r\n          };\r\n          bom_items.push(bom_item);\r\n        }\r\n        // create new BOM and BOM items\r\n        frappe.model.with_doctype('BOM', function() {\r\n          var bom = frappe.model.get_new_doc('BOM');\r\n          bom.items = [];\r\n          for (var i=0; i<bom_items.length; i++) {\r\n            var bom_item = frappe.model.add_child(bom, 'BOM Item', 'items');\r\n            bom_item.item_code = bom_items[i].item_code;\r\n            bom_item.qty = bom_items[i].qty;\r\n            bom_item.uom = bom_items[i].uom;\r\n          }\r\n          frappe.set_route('Form', 'BOM', bom.name);\r\n        });\r\n      }).addClass('btn-primary');\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 0,
  "modified": "2023-03-28 00:06:19.049540",
  "module": null,
  "name": "BOM list extract",
  "script": "frappe.ui.form.on('Stock Entry', {\r\n  refresh: function(frm) {\r\n    if (frm.doc.purpose === 'Manufacture') {\r\n      frm.add_custom_button(__('Extract BOM'), function() {\r\n        // get stock entry detail items\r\n        var items = frm.doc.items;\r\n        var bom_items = [];\r\n        // create BOM items from stock entry items\r\n        for (var i=0; i<items.length; i++) {\r\n          var item = items[i];\r\n          var bom_item = {\r\n            'item_code': item.item_code,\r\n            'qty': item.qty,\r\n            'uom': item.uom,\r\n            'stock_uom': item.stock_uom,\r\n            'conversion_factor': item.conversion_factor\r\n          };\r\n          bom_items.push(bom_item);\r\n        }\r\n        // create new BOM\r\n        frappe.new_doc('BOM', {\r\n          'items': bom_items\r\n        });\r\n      });\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2023-04-04 16:38:21.492786",
  "module": null,
  "name": "REVISION 1 - Extract items to BOM",
  "script": "frappe.ui.form.on('Stock Entry', {\r\n  refresh: function(frm) {\r\n    if (frm.doc.purpose === 'Manufacture') {\r\n      frm.add_custom_button(__('Extract items to BOM'), function() {\r\n        // get stock entry detail items\r\n        var items = frm.doc.items;\r\n        var bom_items = [];\r\n        // create BOM items from stock entry items\r\n        for (var i=0; i<items.length; i++) {\r\n          var item = items[i];\r\n          var bom_item = {\r\n            'item_code': item.item_code,\r\n            'qty': item.qty,\r\n            'uom': item.uom,\r\n            'stock_uom': item.stock_uom,\r\n            'conversion_factor': item.conversion_factor\r\n          };\r\n          bom_items.push(bom_item);\r\n        }\r\n        // create new BOM and BOM items\r\n        frappe.model.with_doctype('BOM', function() {\r\n          var bom = frappe.model.get_new_doc('BOM');\r\n          bom.items = [];\r\n          for (var i=0; i<bom_items.length; i++) {\r\n            var bom_item = frappe.model.add_child(bom, 'BOM Item', 'items');\r\n            bom_item.item_code = bom_items[i].item_code;\r\n            bom_item.qty = bom_items[i].qty;\r\n            bom_item.uom = bom_items[i].uom;\r\n            bom_item.stock_uom = bom_items[i].stock_uom;\r\n            bom_item.conversion_factor = bom_items[i].conversion_factor;\r\n          }\r\n          frappe.set_route('Form', 'BOM', bom.name);\r\n        });\r\n      }).addClass('btn-primary');\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2023-04-04 16:46:34.512288",
  "module": null,
  "name": "REV 2 - EXTRACT ITEMS TO BOM",
  "script": "frappe.ui.form.on('Stock Entry', {\r\n  refresh: function(frm) {\r\n    if (frm.doc.purpose === 'Manufacture') {\r\n      frm.add_custom_button(__('Extract items to BOM'), function() {\r\n        var items = frm.doc.items;\r\n        var bom_items = [];\r\n        for (var i=0; i<items.length; i++) {\r\n          var item = items[i];\r\n          if (item.item_code && item.qty > 0) {\r\n            var bom_item = {\r\n              'item_code': item.item_code,\r\n              'qty': item.qty,\r\n              'uom': item.uom,\r\n              'stock_uom': item.stock_uom,\r\n              'conversion_factor': item.conversion_factor,\r\n              'rate': item.rate,\r\n              'amount': item.amount,\r\n              'warehouse': item.warehouse\r\n            };\r\n            bom_items.push(bom_item);\r\n          }\r\n        }\r\n        var bom = frappe.model.get_new_doc('BOM');\r\n        bom.items = [];\r\n        bom_items.forEach(function(item) {\r\n          var bom_item = frappe.model.add_child(bom, 'BOM Item', 'items');\r\n          bom_item.item_code = item.item_code;\r\n          bom_item.qty = item.qty;\r\n          bom_item.uom = item.uom;\r\n          bom_item.stock_uom = item.stock_uom;\r\n          bom_item.conversion_factor = item.conversion_factor;\r\n          bom_item.rate = item.rate;\r\n          bom_item.amount = item.amount;\r\n          bom_item.warehouse = item.warehouse;\r\n        });\r\n        frappe.set_route('Form', 'BOM', bom.name);\r\n        frappe.after_ajax(function() {\r\n          cur_frm.save();\r\n        });\r\n      }).addClass('btn-primary');\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-04-05 22:38:24.909595",
  "module": null,
  "name": "SALES ORDER STATUS UPDATION",
  "script": "frappe.ui.form.on(\"Sales Order\", {\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1) {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Work Order\",\n                    \"filters\": {\n                        \"sales_order\": frm.doc.name\n                    },\n                    \"fields\": [\"progress_status\"]\n                },\n                callback: function(response) {\n                    if (response.message && response.message.length > 0) {\n                        var all_ready = true;\n                        for (var i = 0; i < response.message.length; i++) {\n                            if (response.message[i].progress_status !== \"RTD\") {\n                                all_ready = false;\n                                break;\n                            }\n                        }\n                        if (all_ready) {\n                            frm.set_value(\"manufacture_status\", \"ALL-RTD\");\n                        } else {\n                            frm.set_value(\"manufacture_status\", \"IN-PROG\");\n                        }\n                    } else {\n                        frm.set_value(\"manufacture_status\", \"NO-WO\");\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-04-06 10:25:16.134894",
  "module": null,
  "name": "LIST VIEW DATA TABS COLORS",
  "script": "frappe.listview_settings['Sales Order'] = {\n    onload: function(listview) {\n        listview.page.add_style('.list-row[data-manufacture_status=\"ALL-RTD\"] .list-row-left .level-indicator {background-color: #FF0000;}');\n        listview.page.add_style('.list-row[data-manufacture_status=\"IN-PROC\"] .list-row-left .level-indicator {background-color: #00FF00;}');\n        listview.page.add_style('.list-row[data-manufacture_status=\"NO-WO\"] .list-row-left .level-indicator {background-color: #0000FF;}');\n    }\n};\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-06-12 16:58:28.967197",
  "module": null,
  "name": "SALES ORDER MAN DAY CALCULATION",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    validate: function(frm) {\r\n        // Calculate man_days based on net_total\r\n        var netTotal = frm.doc.net_total || 0;\r\n        var manDays = netTotal * (0.05 / 600);\r\n        \r\n        // Set the calculated man_days value in the custom field\r\n        frm.set_value('man_days', manDays);\r\n\r\n        // Show the man_days field\r\n        frm.toggle_display('man_days', true);\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-06-12 17:07:06.508730",
  "module": null,
  "name": "MAN DAY CALCULATION REVISED",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    validate: function(frm) {\r\n        // Calculate man_days based on net_total\r\n        var netTotal = frm.doc.net_total || 0;\r\n        var manDays = netTotal * (0.05 / 800);\r\n        \r\n        // Set the calculated man_days value in the custom field\r\n        frm.set_value('man_days_calculation', manDays);\r\n\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-06-16 16:12:33.027749",
  "module": null,
  "name": "Sales order item",
  "script": "frappe.ui.form.on('Sales Order Item', {\r\n    refresh: function(frm) {\r\n        // Add custom field 'num_man_days' as a float type\r\n        frappe.meta.get_docfield('Sales Order Item', 'num_man_days', frm.doc.name).fieldtype = 'Float';\r\n        \r\n        // Fetch the sales order amount and calculate the value\r\n        var salesOrderAmount = frm.doc.amount;\r\n        var numManDays = (salesOrderAmount * 0.05) / 800;\r\n        \r\n        // Set the calculated value in the custom field\r\n        frm.set_value('num_man_days', numManDays);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2023-06-18 17:07:26.104308",
  "module": null,
  "name": "Man Days from SALES ORDER TO MR",
  "script": "frappe.ui.form.on('Material Request', {\r\n    refresh: function(frm) {\r\n        // Fetch man_days_calculation value from Sales Order\r\n        frappe.call({\r\n            method: 'frappe.client.get_value',\r\n            args: {\r\n                doctype: 'Sales Order',\r\n                filters: { name: frm.doc.sales_order },\r\n                fieldname: 'man_days_calculation'\r\n            },\r\n            callback: function(response) {\r\n                if (response && response.message && response.message.man_days_calculation) {\r\n                    // Set the value in man_days_alloted field\r\n                    frm.set_value('man_days_alloted', response.message.man_days_calculation);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 0,
  "modified": "2023-07-03 17:27:56.140176",
  "module": null,
  "name": "LABOUR SHEET PRINT",
  "script": "frappe.ui.form.on('Material Request', {\r\n    refresh: function(frm) {\r\n        // Add custom button on form refresh\r\n        frm.add_custom_button(__('Print Labour Sheet'), function() {\r\n            // Get the Material Request name\r\n            var materialRequestName = frm.doc.name;\r\n\r\n            // Fetch the Material Request document\r\n            frappe.model.with_doc('Material Request', materialRequestName, function() {\r\n                var materialRequest = frappe.get_doc('Material Request', materialRequestName);\r\n\r\n                // Print the desired print format\r\n                frappe.client.get_pdf({\r\n                    method: 'frappe.desk.print_and_pdf.download_pdf',\r\n                    args: {\r\n                        doctype: 'Material Request',\r\n                        name: materialRequest.name,\r\n                        format: 'MANUFACTURE REQUEST LABOUR SHEET',\r\n                        no_letterhead: 0\r\n                    },\r\n                    callback: function(pdfData) {\r\n                        // Generate a Blob from the PDF data\r\n                        var blob = new Blob([pdfData], { type: 'application/pdf' });\r\n\r\n                        // Create a temporary URL for the Blob\r\n                        var url = URL.createObjectURL(blob);\r\n\r\n                        // Open the PDF in a new tab\r\n                        window.open(url);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "_liked_by": "[\"vishveshwar@sagarair.com\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Labour Timesheet",
  "enabled": 0,
  "modified": "2023-08-09 17:22:39.966925",
  "module": null,
  "name": "Total Hrs Calculation",
  "script": "frappe.ui.form.on('Labour Timesheet', {\r\n    refresh: function(frm) {\r\n        frm.fields_dict['labour_timesheet_detail'].grid.get_field('total_hrs').get_query = function(doc, cdt, cdn) {\r\n            var child = locals[cdt][cdn];\r\n            var total_hrs = child.hours + (1.5 * child.ot_hrs);\r\n            frappe.model.set_value(child.doctype, child.name, 'total_hrs', total_hrs);\r\n        };\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Labour Timesheet Detail', {\r\n    hours: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    },\r\n    ot_hrs: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    }\r\n});\r\n\r\nfunction calculateTotalHrs(frm, cdt, cdn) {\r\n    var child = locals[cdt][cdn];\r\n    var total_hrs = child.hours + (1.5 * child.ot_hrs);\r\n    frappe.model.set_value(cdt, cdn, 'total_hrs', total_hrs);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Labour Timesheet",
  "enabled": 0,
  "modified": "2023-08-09 17:42:14.180658",
  "module": null,
  "name": "Total HRs + Total Cost Calculation",
  "script": "frappe.ui.form.on('Labour Timesheet', {\r\n    refresh: function(frm) {\r\n        frm.fields_dict['labour_timesheet_detail'].grid.get_field('total_hrs').get_query = function(doc, cdt, cdn) {\r\n            var child = locals[cdt][cdn];\r\n            var total_hrs = child.hours + (1.5 * child.ot_hrs);\r\n            frappe.model.set_value(child.doctype, child.name, 'total_hrs', total_hrs);\r\n            calculateLabourCost(child);\r\n        };\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Labour Timesheet Detail', {\r\n    hours: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    },\r\n    ot_hrs: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    },\r\n    employee: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    }\r\n});\r\n\r\nfunction calculateTotalHrs(frm, cdt, cdn) {\r\n    var child = locals[cdt][cdn];\r\n    var total_hrs = child.hours + (1.5 * child.ot_hrs);\r\n    frappe.model.set_value(cdt, cdn, 'total_hrs', total_hrs);\r\n    calculateLabourCost(child);\r\n}\r\n\r\nfunction calculateLabourCost(child) {\r\n    frappe.call({\r\n        method: 'frappe.client.get_value',\r\n        args: {\r\n            doctype: 'Employee',\r\n            filters: { name: child.employee },\r\n            fieldname: ['salary_per_month_']\r\n        },\r\n        callback: function(response) {\r\n            if (response && response.message && response.message.salary_per_month_) {\r\n                var labour_cost = response.message.salary_per_month_ * child.total_hrs / 208;\r\n                frappe.model.set_value(child.doctype, child.name, 'labour_cost', labour_cost);\r\n            }\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Labour Timesheet",
  "enabled": 0,
  "modified": "2023-08-09 17:47:08.076087",
  "module": null,
  "name": "HRs+Labour+TotalCost",
  "script": "frappe.ui.form.on('Labour Timesheet', {\r\n    refresh: function(frm) {\r\n        frm.fields_dict['labour_timesheet_detail'].grid.get_field('total_hrs').get_query = function(doc, cdt, cdn) {\r\n            var child = locals[cdt][cdn];\r\n            var total_hrs = child.hours + (1.5 * child.ot_hrs);\r\n            frappe.model.set_value(child.doctype, child.name, 'total_hrs', total_hrs);\r\n            calculateLabourCost(child);\r\n            calculateTotalCost(frm);\r\n        };\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Labour Timesheet Detail', {\r\n    hours: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    },\r\n    ot_hrs: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    },\r\n    employee: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    }\r\n});\r\n\r\nfunction calculateTotalHrs(frm, cdt, cdn) {\r\n    var child = locals[cdt][cdn];\r\n    var total_hrs = child.hours + (1.5 * child.ot_hrs);\r\n    frappe.model.set_value(cdt, cdn, 'total_hrs', total_hrs);\r\n    calculateLabourCost(child);\r\n    calculateTotalCost(frm);\r\n}\r\n\r\nfunction calculateLabourCost(child) {\r\n    frappe.call({\r\n        method: 'frappe.client.get_value',\r\n        args: {\r\n            doctype: 'Employee',\r\n            filters: { name: child.employee },\r\n            fieldname: ['salary_per_month_']\r\n        },\r\n        callback: function(response) {\r\n            if (response && response.message && response.message.salary_per_month_) {\r\n                var labour_cost = response.message.salary_per_month_ * child.total_hrs / 208;\r\n                frappe.model.set_value(child.doctype, child.name, 'labour_cost', labour_cost);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction calculateTotalCost(frm) {\r\n    var total_cost = 0;\r\n    frm.doc.labour_timesheet_detail.forEach(function(child) {\r\n        total_cost += child.labour_cost;\r\n    });\r\n    frm.set_value('total_cost', total_cost);\r\n}\r\n",
  "view": "Form"
 },
 {
  "_liked_by": "[\"vishveshwar@sagarair.com\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Labour Timesheet",
  "enabled": 1,
  "modified": "2023-08-10 16:38:19.915651",
  "module": null,
  "name": "TotalCost+2",
  "script": "frappe.ui.form.on('Labour Timesheet', {\r\n    refresh: function(frm) {\r\n        frm.fields_dict['labour_timesheet_detail'].grid.get_field('total_hrs').get_query = function(doc, cdt, cdn) {\r\n            var child = locals[cdt][cdn];\r\n            var total_hrs = child.hours + (1.5 * child.ot_hrs);\r\n            frappe.model.set_value(child.doctype, child.name, 'total_hrs', total_hrs);\r\n            calculateLabourCost(child);\r\n            refreshTotalCost(frm);\r\n        };\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Labour Timesheet Detail', {\r\n    hours: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    },\r\n    ot_hrs: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    },\r\n    employee: function(frm, cdt, cdn) {\r\n        calculateTotalHrs(frm, cdt, cdn);\r\n    },\r\n    labour_cost: function(frm, cdt, cdn) {\r\n        calculateTotalCost(frm);\r\n    }\r\n});\r\n\r\nfunction calculateTotalHrs(frm, cdt, cdn) {\r\n    var child = locals[cdt][cdn];\r\n    var total_hrs = child.hours + (1.5 * child.ot_hrs);\r\n    frappe.model.set_value(cdt, cdn, 'total_hrs', total_hrs);\r\n    calculateLabourCost(child);\r\n    refreshTotalCost(frm);\r\n}\r\n\r\nfunction calculateLabourCost(child) {\r\n    frappe.call({\r\n        method: 'frappe.client.get_value',\r\n        args: {\r\n            doctype: 'Employee',\r\n            filters: { name: child.employee },\r\n            fieldname: ['salary_per_month_']\r\n        },\r\n        callback: function(response) {\r\n            if (response && response.message && response.message.salary_per_month_) {\r\n                var labour_cost = response.message.salary_per_month_ * child.total_hrs / 208;\r\n                frappe.model.set_value(child.doctype, child.name, 'labour_cost', labour_cost);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n//function refreshTotalCost(frm) {\r\n   // var total_cost = 0;\r\n  //  frm.doc.labour_timesheet_detail.forEach(function(child) {\r\n  //      total_cost += child.labour_cost;\r\n  //  });\r\n  //  frm.set_value('total_cost', total_cost);\r\n// }\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Labour Timesheet",
  "enabled": 0,
  "modified": "2023-08-10 16:34:10.824231",
  "module": null,
  "name": "TOTAL COST FETCHING",
  "script": "frappe.ui.form.on('Labour Timesheet', {\r\n    refresh: function(frm) {\r\n        // Add a custom button to calculate total cost\r\n        frm.add_custom_button(__('Calculate Total Cost'), function() {\r\n            calculateAndSetTotalCost(frm);\r\n        });\r\n    }\r\n});\r\n\r\nfunction calculateAndSetTotalCost(frm) {\r\n    var total_cost = 0;\r\n    \r\n    // Loop through each row in the child table\r\n    frm.doc.labour_timesheet_detail.forEach(function(child) {\r\n        total_cost += child.labour_cost;\r\n    });\r\n\r\n    // Set the calculated total cost in the parent form\r\n    frm.set_value('total_cost', total_cost);\r\n    frm.refresh_field('total_cost'); // Refresh the total_cost field to reflect the change\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Labour Timesheet",
  "enabled": 0,
  "modified": "2023-08-10 16:58:55.954056",
  "module": null,
  "name": "TOTAL COST STORING",
  "script": "frappe.ui.form.on('Labour Timesheet Detail', {\r\n    labour_cost: function(frm, cdt, cdn) {\r\n        calculateTotalCost(frm);\r\n    },\r\n    total_cost: function(frm, cdt, cdn) {\r\n        calculateTotalCost(frm);\r\n    }\r\n});\r\n\r\nfunction calculateTotalCost(frm) {\r\n    var totalCost = 0;\r\n    frm.doc.labour_timesheet_details.forEach(function(row) {\r\n        totalCost += row.labour_cost;\r\n    });\r\n    frm.set_value('total_cost', totalCost);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Labour Timesheet",
  "enabled": 1,
  "modified": "2023-08-10 17:02:54.167347",
  "module": null,
  "name": "TOTAL COST STORING DETAIL",
  "script": "frappe.ui.form.on('Labour Timesheet', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Calculate Total Cost'), function() {\r\n            calculateTotalCost(frm);\r\n        });\r\n    }\r\n});\r\n\r\nfunction calculateTotalCost(frm) {\r\n    var totalCost = 0;\r\n    frm.doc.labour_timesheet_details.forEach(function(row) {\r\n        totalCost += row.labour_cost;\r\n    });\r\n    frm.set_value('total_cost', totalCost);\r\n    frm.save();\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-09-02 17:47:44.786868",
  "module": null,
  "name": "Delivery Notes Button",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Open Del Notes'), function() {\r\n            openDeliveryNotes(frm);\r\n        });\r\n    }\r\n});\r\n\r\nfunction openDeliveryNotes(frm) {\r\n    // Get the Sales Order name\r\n    var sales_order_name = frm.doc.name;\r\n\r\n    // Open Delivery Notes linked to the Sales Order\r\n    frappe.call({\r\n        method: 'your_app.your_module.your_function',\r\n        args: {\r\n            'sales_order_name': sales_order_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                frappe.set_route('List', 'Delivery Note', {'Sales Order': sales_order_name});\r\n            }\r\n        }\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Visit Register",
  "enabled": 1,
  "modified": "2023-09-04 14:42:46.409279",
  "module": null,
  "name": "Total Expense Calculation",
  "script": "frappe.ui.form.on('Service Visit Register', {\r\n    refresh: function(frm) {\r\n        // Add a custom button to trigger the calculation\r\n        frm.add_custom_button(__('Calculate Total Expense'), function() {\r\n            calculateTotalExpense(frm);\r\n        });\r\n    }\r\n});\r\n\r\nfunction calculateTotalExpense(frm) {\r\n    let totalExpense = 0;\r\n\r\n    frm.doc.expense_reporting.forEach(function(row) {\r\n        totalExpense += row.cost || 0;\r\n    });\r\n\r\n    frm.set_value('total_expense', totalExpense);\r\n    frm.refresh_field('total_expense');\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Visit Register",
  "enabled": 1,
  "modified": "2023-09-05 10:12:24.687761",
  "module": null,
  "name": "Fetching items to Service Register",
  "script": "frappe.ui.form.on('Service Visit Register', {\n    sales_order_reference: function(frm) {\n        // Listen for changes in the Sales Order Reference field\n        // Fetch and set data when the Sales Order Reference changes\n        fetch_and_set_sales_order_data(frm);\n    }\n});\n\nfunction fetch_and_set_sales_order_data(frm) {\n    var sales_order_reference = frm.doc.sales_order_reference;\n    if (sales_order_reference) {\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Sales Order',\n                name: sales_order_reference,\n                filters: {\n                    fields: ['items']\n                }\n            },\n            callback: function(r) {\n                if (r.message && r.message.items) {\n                    var items = r.message.items;\n                    var purpose_table = frm.doc.purposes || [];\n                    \n                    // Clear existing rows in the child table\n                    purpose_table.splice(0, purpose_table.length);\n                    \n                    // Loop through the fetched data and add it to the 'purposes' table\n                    $.each(items, function(i, item) {\n                        var child_row = frappe.model.add_child(frm.doc, 'Service Visit Purpose', 'purposes');\n                        child_row.item_code = item.item_code;\n                        child_row.item_name = item.item_name;\n                        child_row.description = item.description;\n                    });\n\n                    frm.refresh_field('purposes');\n                }\n            }\n        });\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-09-05 10:36:34.425250",
  "module": null,
  "name": "Service Register in Listview buttton",
  "script": "frappe.listview_settings['Sales Order'] = {\n    onload: function(listview) {\n        // Add a custom button to the list view\n        listview.page.add_menu_item(__('Open Service Registers'), function() {\n            open_service_registers(listview);\n        });\n    }\n};\n\nfunction open_service_registers(listview) {\n    var selected_items = listview.get_checked_items();\n    if (selected_items.length === 1) {\n        var sales_order_name = selected_items[0].name;\n        frappe.route_options = {\n            'sales_order_reference': sales_order_name\n        };\n        frappe.set_route('List', 'Service Visit Register');\n    } else {\n        frappe.msgprint(__('Please select one Sales Order.'));\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-09-05 10:59:52.264529",
  "module": null,
  "name": "Service Registers in Sales Order List View",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Open Service Visits'), function() {\n            frappe.set_route('List', 'Service Visit Register', {'sales_order_reference': frm.doc.name});\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-09-05 11:02:44.890351",
  "module": null,
  "name": "Delivery Notes List View in Sales Order",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Open Delivery Notes'), function() {\n            frappe.set_route('List', 'Delivery Note', {'sales_order_reference': frm.doc.name});\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Visit Register",
  "enabled": 1,
  "modified": "2023-09-05 12:35:37.056267",
  "module": null,
  "name": "To Pay calculation",
  "script": "frappe.ui.form.on('Service Visit Register', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Calculate To Pay'), function() {\r\n            // Get the 'advancetaken' and 'total_expense' values\r\n            var advancetaken = frm.doc.advancetaken || 0;\r\n            var totalExpense = frm.doc.total_expense || 0;\r\n\r\n            // Calculate 'to_pay' by subtracting 'advancetaken' from 'total_expense'\r\n            var toPay = totalExpense - advancetaken;\r\n\r\n            // Update the 'to_pay' field\r\n            frm.set_value('to_pay', toPay);\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "_liked_by": "[\"vishveshwar@sagarair.com\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Visit Register",
  "enabled": 1,
  "modified": "2023-09-07 16:02:20.492728",
  "module": null,
  "name": "TOTAL COST CALUCLATION _ SERviCE vISiT",
  "script": "frappe.ui.form.on('Service Visit Register', {\r\n    refresh: function(frm) {\r\n        frm.fields_dict['service_visit_manday_reporting'].grid.get_field('technician_cost').get_query = function(doc, cdt, cdn) {\r\n            var row = locals[cdt][cdn];\r\n            return {\r\n                filters: {\r\n                    'monthly_wages': row.monthly_wages,\r\n                    'number_of_days_worked': row.number_of_days_worked,\r\n                    'extra_days_absent': row.extra_days_absent,\r\n                }\r\n            };\r\n        };\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Service Visit Manday Reporting', {\r\n    monthly_wages: function(frm, cdt, cdn) {\r\n        calculateTechnicianCost(frm, cdt, cdn);\r\n    },\r\n    number_of_days_worked: function(frm, cdt, cdn) {\r\n        calculateTechnicianCost(frm, cdt, cdn);\r\n    },\r\n    extra_days_absent: function(frm, cdt, cdn) {\r\n        calculateTechnicianCost(frm, cdt, cdn);\r\n    }\r\n});\r\n\r\nfunction calculateTechnicianCost(frm, cdt, cdn) {\r\n    var row = locals[cdt][cdn];\r\n    if (row.monthly_wages && row.number_of_days_worked && row.extra_days_absent) {\r\n        var mw = row.monthly_wages;\r\n        var nd = row.number_of_days_worked;\r\n        var ex = row.extra_days_absent;\r\n        var technician_cost = (mw / 26) * nd * 1.5 + ex * (mw / 26);\r\n        frappe.model.set_value(cdt, cdn, 'technician_cost', technician_cost);\r\n    } else {\r\n        frappe.model.set_value(cdt, cdn, 'technician_cost', 0);\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "_liked_by": "[\"vishveshwar@sagarair.com\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Visit Register",
  "enabled": 0,
  "modified": "2023-09-07 16:02:16.232607",
  "module": null,
  "name": "Total Technician Cost updated",
  "script": "frappe.ui.form.on('Service Visit Register', {\r\n    refresh: function(frm) {\r\n        frm.fields_dict['service_visit_manday_reporting'].grid.get_field('technician_cost').get_query = function(doc, cdt, cdn) {\r\n            var row = locals[cdt][cdn];\r\n            return {\r\n                filters: {\r\n                    'monthly_wages': row.monthly_wages,\r\n                    'number_of_days_worked': row.number_of_days_worked,\r\n                    'extra_days_absent': row.extra_days_absent,\r\n                }\r\n            };\r\n        };\r\n    },\r\n    validate: function(frm) {\r\n        calculateTotalTechnicianCost(frm);\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Service Visit Manday Reporting', {\r\n    monthly_wages: function(frm, cdt, cdn) {\r\n        calculateTechnicianCost(frm, cdt, cdn);\r\n    },\r\n    number_of_days_worked: function(frm, cdt, cdn) {\r\n        calculateTechnicianCost(frm, cdt, cdn);\r\n    },\r\n    extra_days_absent: function(frm, cdt, cdn) {\r\n        calculateTechnicianCost(frm, cdt, cdn);\r\n    },\r\n    technician_cost: function(frm, cdt, cdn) {\r\n        calculateTotalTechnicianCost(frm);\r\n    },\r\n    service_visit_manday_reporting_remove: function(frm, cdt, cdn) {\r\n        calculateTotalTechnicianCost(frm);\r\n    }\r\n});\r\n\r\nfunction calculateTechnicianCost(frm, cdt, cdn) {\r\n    var row = locals[cdt][cdn];\r\n    if (row.monthly_wages && row.number_of_days_worked && row.extra_days_absent) {\r\n        var mw = row.monthly_wages;\r\n        var nd = row.number_of_days_worked;\r\n        var ex = row.extra_days_absent;\r\n        var technician_cost = (mw / 26) * nd * 1.5 + ex * (mw / 26);\r\n        frappe.model.set_value(cdt, cdn, 'technician_cost', technician_cost);\r\n    } else {\r\n        frappe.model.set_value(cdt, cdn, 'technician_cost', 0);\r\n    }\r\n}\r\n\r\nfunction calculateTotalTechnicianCost(frm) {\r\n    var total_technician_cost = 0;\r\n    $.each(frm.doc.service_visit_manday_reporting || [], function(i, row) {\r\n        total_technician_cost += row.technician_cost || 0;\r\n    });\r\n    frm.set_value('total_technician_cost', total_technician_cost);\r\n    refresh_field('total_technician_cost');\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Visit Register",
  "enabled": 0,
  "modified": "2023-09-07 16:09:27.619449",
  "module": null,
  "name": "Total Technician Cost Calculation - TOTAL",
  "script": "frappe.ui.form.on('Service Visit Register', {\r\n    refresh: function(frm) {\r\n        // Trigger the calculation when the form is loaded or refreshed\r\n        calculateTotalTechnicianCost(frm);\r\n    }\r\n});\r\n\r\nfunction calculateTotalTechnicianCost(frm) {\r\n    // Initialize the total cost variable\r\n    var totalTechnicianCost = 0;\r\n    \r\n    // Loop through each row in the 'Service Visit Manday Reporting' child table\r\n    frm.doc.service_visit_manday_reporting.forEach(function(row) {\r\n        // Add the 'technician_cost' of each row to the total cost\r\n        totalTechnicianCost += row.technician_cost || 0;\r\n    });\r\n    \r\n    // Update the 'total_technician_cost' field with the calculated total\r\n    frm.set_value('total_technician_cost', totalTechnicianCost);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Visit Register",
  "enabled": 1,
  "modified": "2023-09-11 11:44:03.039598",
  "module": null,
  "name": "total Technician Cost Calculation from Rows",
  "script": "frappe.ui.form.on('Service Visit Register', {\r\n    refresh: function(frm) {\r\n        // Add a custom button to trigger the calculation\r\n        frm.add_custom_button(__('Calculate Total Technician Cost'), function() {\r\n            calculateTotalTechnicianCost(frm);\r\n        });\r\n    }\r\n});\r\n\r\nfunction calculateTotalTechnicianCost(frm) {\r\n    let totalTechnicianCost = 0;\r\n\r\n    frm.doc.service_visit_manday_reporting.forEach(function(row) {\r\n        totalTechnicianCost += row.technician_cost || 0;\r\n    });\r\n\r\n    frm.set_value('total_technician_cost', totalTechnicianCost);\r\n    frm.refresh_field('total_technician_cost');\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Visit Register",
  "enabled": 1,
  "modified": "2023-09-11 11:43:57.174587",
  "module": null,
  "name": "TOTAL SERVICE COST CALCULATION",
  "script": "frappe.ui.form.on('Service Visit Register', {\r\n    refresh: function(frm) {\r\n        // Add a custom button to trigger the calculation\r\n        frm.add_custom_button(__('Calculate Total Service Cost'), function() {\r\n            calculateTotalServiceCost(frm);\r\n        });\r\n    }\r\n});\r\n\r\nfunction calculateTotalServiceCost(frm) {\r\n    // Get the values of the custom fields\r\n    var totalTechnicianCost = frm.doc.total_technician_cost || 0;\r\n    var totalExpense = frm.doc.total_expense || 0;\r\n\r\n    // Calculate the total service cost\r\n    var totalServiceCost = totalTechnicianCost + totalExpense;\r\n\r\n    // Update the 'total_service_cost' field with the calculated total\r\n    frm.set_value('total_service_cost', totalServiceCost);\r\n    frm.refresh_field('total_service_cost');\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-09-20 08:45:20.703717",
  "module": null,
  "name": "SITE EXPENSES ADDED TO SO",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        // Add a custom button to calculate and update 'site_expenses'\n        frm.add_custom_button(__('Calc. Site Ex'), function() {\n            calculateSiteExpenses(frm);\n        });\n    }\n});\n\nfunction calculateSiteExpenses(frm) {\n    // Initialize the total cost variable\n    let totalServiceCost = 0;\n\n    // Loop through the 'Service Visit Register' linked documents\n    frm.doc.items.forEach(function(item) {\n        if (item.service_visit_register) {\n            // Fetch the 'total_service_cost' from 'Service Visit Register'\n            frappe.call({\n                method: 'your_app.your_module.get_total_service_cost',\n                args: {\n                    service_visit_register: item.service_visit_register,\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        totalServiceCost += response.message;\n                        frm.set_value('site_expenses', totalServiceCost);\n                    }\n                }\n            });\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2023-10-03 17:53:40.695139",
  "module": null,
  "name": "PO RELEASED",
  "script": "frappe.ui.form.on('Purchase Order', {\r\n    refresh: function(frm) {\r\n        // Check if the 'document_status' field is not already 'PO Released'\r\n        if (frm.doc.document_status !== 'PO Released') {\r\n            // Add the 'PO Released' button\r\n            frm.add_custom_button(__('PO Released'), function() {\r\n                // Set the 'document_status' field to 'PO Released'\r\n                frm.set_value('document_status', 'PO Released');\r\n                // Save the form\r\n                frm.save();\r\n                // Hide the button after clicking\r\n                frm.get_field('po_released_button').toggle(false);\r\n            }).addClass('btn-danger')\r\n              .attr('id', 'po_released_button')\r\n              .attr('title', __('Mark Purchase Order as Released'));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]