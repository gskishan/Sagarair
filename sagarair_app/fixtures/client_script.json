[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Proforma Invoice",
  "enabled": 1,
  "modified": "2025-07-09 14:12:46.775238",
  "module": "Sagarair APP",
  "name": "Auto Calculate Item Amounts - Proforma",
  "script": "// 🔄 Recalculate amount when qty or rate is changed\nfrappe.ui.form.on('Proforma Invoice Item', {\n    quantity: function (frm, cdt, cdn) {\n        calculate_amount(frm, cdt, cdn);\n        calculate_totals(frm); // also update parent\n    },\n    rate: function (frm, cdt, cdn) {\n        calculate_amount(frm, cdt, cdn);\n        calculate_totals(frm);\n    },\n    amount: function(frm, cdt, cdn) {\n        calculate_totals(frm);  // if amount is edited manually\n    }\n});\n\n// 📦 Calculate line amount\nfunction calculate_amount(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    row.amount = (row.quantity || 0) * (row.rate || 0);\n    frappe.model.set_value(cdt, cdn, 'amount', row.amount);\n}\n\n// 🔁 Calculate parent totals\nfunction calculate_totals(frm) {\n    let total_qty = 0;\n    let total_amt = 0;\n\n    (frm.doc.custom_items || []).forEach(row => {\n        total_qty += row.quantity || 0;\n        total_amt += row.amount || 0;\n    });\n\n    // Show in UI\n    frm.set_value('total_quantity', total_qty);\n    frm.set_value('total', total_amt);\n    frm.set_value('net_total', total_amt);\n}\n\n// 🧾 Update totals on Save too\nfrappe.ui.form.on('Proforma Invoice', {\n    before_save: function (frm) {\n        calculate_totals(frm);\n    },\n    items_remove: function(frm) {\n        calculate_totals(frm);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Proforma Invoice",
  "enabled": 1,
  "modified": "2025-07-09 14:10:51.218137",
  "module": "Sagarair APP",
  "name": "Proforma Invoice - Tax Rows from Template",
  "script": "frappe.ui.form.on('Proforma Invoice', {\n    sales_taxes_and_charges_template: function(frm) {\n        if (frm.doc.sales_taxes_and_charges_template) {\n            frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Sales Taxes and Charges Template\",\n                    name: frm.doc.sales_taxes_and_charges_template\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        const template = r.message;\n\n                        // Clear current taxes table\n                        frm.clear_table(\"sales_taxes_and_charges\");\n\n                        // Loop over tax rows from the template\n                        (template.taxes || []).forEach(function(row) {\n                            let new_row = frm.add_child(\"sales_taxes_and_charges\");\n                            new_row.charge_type = row.charge_type;\n                            new_row.account_head = row.account_head;\n                            new_row.description = row.description;\n                            new_row.cost_center = row.cost_center;\n                            new_row.rate = row.rate;\n                            new_row.included_in_print_rate = row.included_in_print_rate;\n                        });\n\n                        frm.refresh_field(\"sales_taxes_and_charges\");\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Proforma Invoice",
  "enabled": 1,
  "modified": "2025-07-09 15:04:29.044719",
  "module": "Sagarair APP",
  "name": "Auto Compute Taxes - Proforma Invoice",
  "script": "frappe.ui.form.on('Sales Taxes and Charges', {\n    rate: function(frm, cdt, cdn) {\n        calculate_cumulative_tax(frm);\n    }\n});\n\nfrappe.ui.form.on('Proforma Invoice', {\n    validate: function(frm) {\n        calculate_cumulative_tax(frm);\n    }\n});\n\nasync function calculate_cumulative_tax(frm) {\n    let net_total = frm.doc.net_total || 0;\n    let total_taxes = 0;\n    let previous_total = net_total;\n\n    for (const row of frm.doc.sales_taxes_and_charges || []) {\n        if (row.rate) {\n            // Always use net_total to calculate amount\n            const amount = (row.rate / 100) * net_total;\n\n            // First row: total = net_total + amount\n            // Next rows: total = previous_total + amount\n            const row_total = previous_total + amount;\n\n            await frappe.model.set_value(row.doctype, row.name, 'tax_amount', amount);\n            await frappe.model.set_value(row.doctype, row.name, 'total', row_total);\n\n            previous_total = row_total;\n            total_taxes += amount;\n        }\n    }\n\n    frm.set_value(\"total_taxes_and_charges\", total_taxes);\n    frm.set_value(\"grand_total\", previous_total);\n    frm.refresh_field(\"sales_taxes_and_charges\");\n}\n",
  "view": "Form"
 }
]